/**
 * @file    lodp_session.h
 * @author  Yawning Angel (yawning at schwanenlied dot me)
 * @brief   LODP Session
 */

/*
 * Copyright (c) 2013, Yawning Angel <yawning at schwanenlied dot me>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef SCHWANENLIED_LODP_LODP_SESSION_H__
#define SCHWANENLIED_LODP_LODP_SESSION_H__

#include <chrono>
#include <memory>

#include "schwanenlied/common.h"
#include "schwanenlied/ip_address.h"
#include "schwanenlied/crypto/curve25519.h"
#include "schwanenlied/crypto/ntor.h"
#include "schwanenlied/crypto/random.h"
#include "schwanenlied/crypto/siv_blake2s_xchacha.h"
#include "schwanenlied/crypto/utils.h"

// Autogenerated Protocol Buffers Header
#include "lodp.pb.h"

namespace schwanenlied {
namespace lodp {

class LodpEndpoint;

/**
 * The LODP Session
 *
 * A LodpSession is the active session between two endpoints.  It handles the
 * initiator side of the handshake process, transmitting/receving data payload
 * and rekeying.
 *
 * It is important to note that users will **NEVER** create or destroy sessions,
 * but instead will obtain them via LodpEndpoint::connect()/the incoming
 * connection callback and destroy them via LodpSession::close().
 *
 * @todo The REKEY handling should be more sophisticated and save off the
 * previous key/sequence numbering state so that it is possible to transmit data
 * even while rekeying.  The current implementation blocks the initiator from
 * sending any data till it has confirmation that the peer received the REKEY
 * ACK.
 */
class LodpSession {
 public:
  /** LodpSession statistics */
  struct Stats {
    /** @{ */
    uint64_t tx_bytes_;         /**< Total bytes sent */
    uint64_t rx_bytes_;         /**< Total bytes received */
    uint64_t tx_goodput_bytes_; /**< Total payload sent */
    uint64_t rx_goodput_bytes_; /**< Total payload received */
    /** @} */

    /** @{ */
    uint32_t generation_id_;    /**< Generation ID (counts rekeys) */
    uint32_t generation_tx_;    /**< Data packets sent this generation */
    uint32_t generation_rx_;    /**< Data packets received this generation */
    /** @} */
  };

  ~LodpSession();

  /** @{ */
  /** Get the user defined context handle */
  void* context() const { return ctxt_; }
  /** Set the user defined context handle */
  void set_context(void* ctxt) { ctxt_ = ctxt; };
  /** @} */

  /** @{ */
  /** Get the maximum transmittable payload length in bytes */
  const size_t mtu() const;
  /** Get the current LodpSession Stats */
  const struct Stats& stats() const { return stats_; }
  /** @} */

  /** @{ */
  /** Is the LodpSession in the middle of handshaking? */
  const bool is_handshaking() const {
    return state_ == State::kINIT || state_ == State::kHANDSHAKE;
  }
  /** Is the LodpSession established? */
  const bool is_established() const { return state_ == State::kESTABLISHED; }
  /** Is the LodpSession rekeying? */
  const bool is_rekeying() const { return state_ == State::kREKEY; }
  /** Is the LodpSession in a error state? */
  const bool is_error() const { return state_ == State::kERROR; }
  /** @} */

  /** @{ */
  /**
   * Attempt to make forward progress in the handshake (Initiator only)
   *
   * @warning It is the responsibility of the caller to limit how frequently
   * they call this routine.  Internally it does no rate limiting and can end up
   * spamming the remote peer with packets.
   *
   * @returns -EBADFD            - The LodpSession is in a invalid state
   * @returns -EISCONN           - The LodpSession is already connected
   * @returns kErrorNotInitiator - The LodpSession is not the initiator (client)
   *                               side of the connection.
   * @returns (User specified value) - The value returned from the callback
   */
  int handshake();

  /**
   * Send data to the remote peer
   *
   * @param[in] buf  The buffer to send
   * @param[in] len  The lenght of the buffer
   *
   * @returns -EINVAL - The parameters are invalid
   * @returns -EMSGSIZE - The size of the buffer is bigger than the mtu().
   * @returns -ENOTCONN - The connection is not fully handshaked
   * @returns -ECONNABORTED - No remaining sequence number space to send *ANY*
   *                          data (Must close() the LodpSession)
   * @returns kErrorMustRekey - The initiator must rekey() before it can send
   *                            data.
   * @returns (User specified value) - The value returned from the callback
   */
  int send(const void* buf, const size_t len);

  /**
   * Attempt to rekey the ephemeral session keys (Initiator only)
   *
   * @returns -ENOTCONN - The connection is not fully handshaked
   * @returns -ECONNABORTED - No remaining sequence number space to send *ANY*
   *                          data (Must close() the LodpSession)
   * @returns kErrorNotInitiator - The LodpSession is not the initiator (client)
   *                               side of the connection.
   */
  int rekey();

  /**
   * Close the LodpSession
   *
   * This will call the user's on_close callback and **DESTROY** the LodpSession
   * object.  Refering to the LodpSession object past returning from the
   * on_close callback has undefined behavior (probably a SIGSEGV).
   *
   * @param[in] send_shutdown   Send a SHUTDOWN packet if able
   *
   * @returns kErrorOk - Success
   */
  int close(const bool send_shutdown = true);
  /** @} */

 private:
  LodpSession() = delete;
  LodpSession(const LodpSession&) = delete;
  void operator=(const LodpSession&) = delete;

  // Implementaton specific constants
  /** @{ */
  /** Inform the user to rekey() at this send seq nr (2^31) */
  static const uint32_t kRekeyPacketCount = 0x80000000;
  /** @} */

  // Protocol constants
  /** @{ */
  /** The Protobuf framing overhead of a DATA packet */
  static const size_t kDataFramingOverhead = 12;
  /** The maximum Protobuf framing overhead for padding mtu() sized packets */
  static const size_t kMaxPadFramingOverhead = 3;
  /** @} */

  /** @{ */
  /**
   * Create the initiator (client) side LodpSession object
   *
   * @param[in] ep                The LodpEndpoint associated with this LodpSession
   * @param[in] ctxt              The LodpSession user context handle
   * @param[in] peer_identity_key The remote LodpEndpoint's Identity
   *                              crypto::Curve25519::PublicKey
   * @param[in] node_id           The ID of the remote LodpEndpoint (for
   *                              crypto::NtorHandshake)
   * @param[in] node_id_len       The length of node_id
   * @param[in] addr              The remote LodpEndpoint's IP address/port
   */
  LodpSession(LodpEndpoint& ep,
              void* ctxt,
              const crypto::Curve25519::PublicKey& peer_identity_key,
              const uint8_t* node_id,
              const size_t node_id_len,
              const IPAddress& addr);

  /**
   * Create the responder (server) side LodpSession object
   *
   * While in theory only the shared_secret is needed to talk to the peer, the
   * LodpSession object will cache enough information to be able to build and
   * transmit the HANDSHAKE ACK packet.  This information is wiped via
   * scrub_handshake_state() as soon as the peer sends data indicating that it
   * has received a HANDSHAKE ACK.
   *
   * @param[in] ep                The LodpEndpoint associated with this LodpSession
   * @param[in] session_key       Our ephemeral crypto::Curve25519::PublicKey
   * @param[in] peer_session_key  The remote LodpSession's ephemeral
   *                              crypto::Curve25519::PublicKey
   * @param[in] shared_secret     The shared secret from the
   *                              crypto::NtorHandshake
   * @param[in] auth              The authenticator from the
   *                              crypto::NtorHandshake
   * @param[in] addr              The remote LodpEndpoint's IP address/port
   */
  LodpSession(LodpEndpoint& ep,
              const crypto::Curve25519::PublicKey& session_key,
              const crypto::Curve25519::PublicKey& peer_session_key,
              const crypto::SecureBuffer& shared_secret,
              const crypto::SecureBuffer& auth,
              const IPAddress& addr);
  /** @} */

  /** @{ */
  /** Securely wipe and destroy the handshake/rekey state */
  void scrub_handshake_state();

  /**
   * Add random padding to a packet to disguise payload size
   *
   * @warning The amount of framing overhead is tuned for standard ethernet
   * frames.  If you are using a interface that has a MTU greater than 1500
   * bytes or so, kMaxPadFramingOverhead will need to be changed.
   */
  void pad_packet(packet::Envelope& pkt);

  /**
   * Encrypt and transmit a packet
   *
   * This encrypts the packet with the LodpSession's ephemeral session key and
   * transmits it.  If the LodpSession is in the middle of a rekey() operation,
   * the old key will be used.
   *
   * @returns (User specified value) - The value returned from the callback
   */
  int siv_encrypt_and_xmit(packet::Envelope& pkt);

  /**
   * Decrypt and authenticate a packet
   *
   * This attempts to decrypt and authenticate a given packet.
   *
   * @param[in] buf         The packet to decrypt
   * @param[in] len         The lenght of the packet
   * @param[out] plaintext  The buffer where the plaintext should be stored
   *
   * @returns true - The packet was decrypted and authenticated
   * @returns false - The packet is not encrypted with a key that is recognized
   */
  bool siv_decrypt(const uint8_t* buf,
                   const size_t len,
                   ::std::string& plaintext);
  /** @} */

  /** @{ */
  /** Validate the current transmit sequence number */
  bool tx_seq_ok();
  /** Validate the sequence number in a incoming packet */
  bool rx_seq_ok(const uint32_t seq);
  /** Does the LodpSession need to rekey()? */
  bool should_rekey();
  /** The rekey() finished */
  void on_rekey_done();
  /** @} */

  /** @{ */
  /**
   * Send a INIT packet
   *
   * @returns (User specified value) - The value returned from the callback
   */
  int send_init_packet();

  /**
   * Send a HANDSHAKE packet
   *
   * @returns (User specified value) - The value returned from the callback
   */
  int send_handshake_packet();

  /**
   * Send a HANDSHAKE ACK packet
   *
   * @returns kErrorProtocol - The LodpSession is not in a state that allows
   *                           transmitting a HANDSHAKE ACK
   * @returns (User specified value) - The value returned from the callback
   */
  int send_handshake_ack_packet(const ::std::string& siv_key_source);

  /**
   * Send a REKEY packet
   *
   * @returns kErrorProtocol - The LodpSession is not in a state that allows
   *                           transmitting a REKEY
   * @returns (User specified value) - The value returned from the callback
   */
  int send_rekey_packet();

  /**
   * Send a REKEY ACK packet
   *
   * @returns kErrorProtocol - The LodpSession is not in a state that allows
   *                           transmitting a REKEY ACK
   * @returns (User specified value) - The value returned from the callback
   */
  int send_rekey_ack_packet();

  /**
   * Send a SHUTDOWN packet
   *
   * As this is only invoked from LodpSession::close(), errors are ignored as the
   * connection is getting torn down.
   */
  void send_shutdown_packet();
  /** @} */

  /** @{ */
  /**
   * Validate and process a inbound DATA packet
   *
   * @param[in] pkt   The DATA packet to process
   *
   * @returns kErrorOk       - Success
   * @returns kErrorProtocol - The LodpSession is not in a state that allows
   *                           DATA packets/Packet out of window
   * @returns kErrorBadPacketFormat - The DATA packet is malformed
   *
   */
  int on_data_packet(const packet::Envelope& pkt);

  /**
   * Validate and process a inbound INIT ACK packet
   *
   * @param[in] pkt   The INIT ACK packet to process
   *
   * @returns kErrorProtocol - The LodpSession is not in a state that allows
   *                           INIT ACK packets
   * @returns kErrorBadPacketFormat - The INIT ACK packet is malformed
   * @returns (User specified value) - The value returned from the callback
   */
  int on_init_ack_packet(const packet::Envelope& pkt);

  /**
   * Validate and process a inbound HANDSHAKE packet
   *
   * This routine is explicitly present to handle the case where the initiator
   * retransmits a HANDSHAKE packet when the HANDSHAKE ACK gets lost.  By the
   * time this routine is called, the packet has already been verified for
   * correctness.
   *
   * @param[in] pkt   The HANDSHAKE packet to process
   *
   * @returns kErrorProtocol - The LodpSession is not in a state that allows
   *                           HANDSHAKE packets
   * @returns (User specified value) - The value returned from the callback
   */
  int on_handshake_packet(const packet::Envelope& pkt);

  /**
   * Validate and process a inbound HANDSHAKE ACK packet
   *
   * @param[in] pkt   The HANDSHAKE ACK packet to process
   *
   * @returns kErrorOk - Success
   * @returns kErrorProtocol - The LodpSession is not in a state that allows
   *                           HANDSHAKE ACK packets
   * @returns kErrorBadPacketFormat - The HANDSHAKE ACK packet is malformed
   * @returns -ECONNABORTED         - The crypto::NtorHandshake failed
   */
  int on_handshake_ack_packet(const packet::Envelope& pkt);

  /**
   * Validate and process a inbound REKEY packet
   *
   * @param[in] pkt   The REKEY packet to process
   *
   * @returns kErrorProtocol - The LodpSession is not in a state that allows
   *                           REKEY packets
   * @returns kErrorBadPacketFormat - The REKEY packet is malformed
   * @returns (User specified value) - The value returned from the callback
   */
  int on_rekey_packet(const packet::Envelope& pkt);

  /**
   * Validate and process a inbound REKEY ACK packet
   *
   * @param[in] pkt   The REKEY ACK packet to process
   *
   * @returns kErrorOk - Success
   * @returns kErrorProtocol - The LodpSession is not in a state that allows
   *                           REKEY ACK packets
   * @returns kErrorBadPacketFormat - The REKEY ACK packet is malformed
   * @returns -ECONNABORTED         - The crypto::NtorHandshake failed
   */
  int on_rekey_ack_packet(const packet::Envelope& pkt);

  /**
   * Validate and process a inbound SHUTDONW packet
   *
   * If the packet is valid this will call close() on the session that received
   * the packet.
   *
   * @param[in] pkt   The SHUTDOWN packet to process
   *
   * @returns kErrorOk - Success
   * @returns kErrorBadPacketFormat - The SHUTDOWN packet is malformed
   */
  int on_shutdown_packet(const packet::Envelope& pkt);
  /** @} */

  // User config/callbacks
  /** @{ */
  void* ctxt_;  /**< The LodpSession user context handle */
  /** @} */

  // Session state
  /** @{ */
  /** The LodpEndpoint associated with this session */
  LodpEndpoint& endpoint_;
  /** The LodpSession protocol state */
  enum class State {
    kINVALID,     /**< Invalid Session */
    kINIT,        /**< INIT sent */
    kHANDSHAKE,   /**< HANDSHAKE sent */
    kESTABLISHED, /**< Connection established */
    kREKEY,       /**< Rekey in progress */
    kERROR        /**< Error encountered, must close() */
  } state_; /**< The LodpSession protocol state */

  /** The remote LodpEndpoint's IP address/port */
  IPAddress peer_addr_;
  /** The responder's Identity crypto::Curve25519::PublicKey (Initiator only) */
  ::std::unique_ptr<crypto::Curve25519::PublicKey> peer_identity_key_;
  /** The responder's crypto::NtorHandshake ID (Initiator only) */
  ::std::unique_ptr<crypto::SecureBuffer> node_id_;
  /** The crypto::SIVBlake2sXChaCha instance used to receive packets */
  ::std::unique_ptr<crypto::SIVBlake2sXChaCha> ephemeral_rx_siv_;
  /** The crypto::SIVBlake2sXChaCha instance used to transmit packets */
  ::std::unique_ptr<crypto::SIVBlake2sXChaCha> ephemeral_tx_siv_;
  /** The crypto::SIVBlake2sXChaCha instance used to receive packets (REKEY) */
  ::std::unique_ptr<crypto::SIVBlake2sXChaCha> prev_ephemeral_rx_siv_;
  /** The crypto::SIVBlake2sXChaCha instance used to transmit packets (REKEY) */
  ::std::unique_ptr<crypto::SIVBlake2sXChaCha> prev_ephemeral_tx_siv_;
  /** @} */

  // Replay prevention
  /** @{ */
  uint32_t tx_last_seq_;  /**< The last send sequence number */
  uint32_t rx_last_seq_;  /**< The last receive sequence number */
  uint64_t rx_bitmap_;    /**< The receive bitmap */
  /** @} */

  // Handshake/rekey state
  /** @{ */
  /** The LodpSession has cached HANDSHAKE/REKEY state */
  bool has_cached_state_;
  /** The LodpSession's ephemeral crypto::Curve25519::PublicKey */
  ::std::unique_ptr<const crypto::Curve25519::PublicKey> session_key_;
  /** The LodpSession's ephemeral crypto::Curve25519::PrivateKey */
  ::std::unique_ptr<const crypto::Curve25519::PrivateKey> session_private_key_;
  /** The peer's ephemeral crypto::Curve25519::PublicKey */
  ::std::unique_ptr<const crypto::Curve25519::PublicKey> peer_session_key_;
  /** The key derivation material for the INIT ACK/HANDSHAKE ACK packets */
  ::std::unique_ptr<crypto::SecureBuffer> siv_key_source_;
  /** The authenticator from the crypto::NtorHandshake */
  ::std::unique_ptr<crypto::SecureBuffer> auth_;
  /** The cookie received in the INIT ACK (Initiator only) */
  ::std::unique_ptr<::std::string> cookie_;
  /** When the cached cookie will expire (Estimate) */
  ::std::chrono::steady_clock::time_point cookie_expire_time_;
  /** @} */

  // Connection statistics
  /** @{ */
  struct Stats stats_;  /**< Various LodpSession statistics */
  /** @} */

  /** LodpEndpoint is tightly coupled with LodpSession */
  friend LodpEndpoint;
};

} // namespace lodp
} // namespace schwanenlied

#endif // SCHWANENLIED_LODP_LODP_SESSION_H__
